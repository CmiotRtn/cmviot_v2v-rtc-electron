"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IMediaPlayerSourceObserver = void 0;
/**
 * This module was automatically generated by `ts-interface-builder`
 */
var t = __importStar(require("ts-interface-checker"));
// tslint:disable:object-literal-key-quotes
exports.IMediaPlayerSourceObserver = t.iface([], {
    "onPlayerSourceStateChanged": t.opt(t.func("void", t.param("state", "MediaPlayerState"), t.param("ec", "MediaPlayerError"))),
    "onPositionChanged": t.opt(t.func("void", t.param("positionMs", "number"))),
    "onPlayerEvent": t.opt(t.func("void", t.param("eventCode", "MediaPlayerEvent"), t.param("elapsedTime", "number"), t.param("message", "string"))),
    "onMetaData": t.opt(t.func("void", t.param("data", "Uint8Array"), t.param("length", "number"))),
    "onPlayBufferUpdated": t.opt(t.func("void", t.param("playCachedBuffer", "number"))),
    "onPreloadEvent": t.opt(t.func("void", t.param("src", "string"), t.param("event", "PlayerPreloadEvent"))),
    "onCompleted": t.opt(t.func("void")),
    "onCmviotCDNTokenWillExpire": t.opt(t.func("void")),
    "onPlayerSrcInfoChanged": t.opt(t.func("void", t.param("from", "SrcInfo"), t.param("to", "SrcInfo"))),
    "onPlayerInfoUpdated": t.opt(t.func("void", t.param("info", "PlayerUpdatedInfo"))),
    "onAudioVolumeIndication": t.opt(t.func("void", t.param("volume", "number"))),
});
var exportedTypeSuite = {
    IMediaPlayerSourceObserver: exports.IMediaPlayerSourceObserver,
};
exports.default = exportedTypeSuite;
