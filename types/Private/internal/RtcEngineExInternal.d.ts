import { Channel } from '../../Types';
import { AudioEncodedFrameObserverConfig, AudioRecordingConfiguration, ClientRoleOptions, ClientRoleType, DataStreamConfig, EchoTestConfiguration, IAudioEncodedFrameObserver, RecorderStreamInfo, SimulcastStreamConfig, SimulcastStreamMode, VideoCanvas, VideoMirrorModeType, WatermarkOptions } from '../CmviotBase';
import { IAudioSpectrumObserver, RenderModeType, VideoSourceType } from '../CmviotMediaBase';
import { IAudioDeviceManager } from '../IAudioDeviceManager';
import { IMediaEngine } from '../ICmviotMediaEngine';
import { IMediaPlayer } from '../ICmviotMediaPlayer';
import { IMediaRecorder } from '../ICmviotMediaRecorder';
import { IMusicContentCenter } from '../ICmviotMusicContentCenter';
import { ChannelMediaOptions, DirectCdnStreamingMediaOptions, IDirectCdnStreamingEventHandler, IMetadataObserver, IRtcEngineEventHandler, IVideoDeviceManager, LeaveChannelOptions, MetadataType, RtcEngineContext, SDKBuildInfo, ScreenCaptureConfiguration, ScreenCaptureSourceInfo, Size } from '../ICmviotRtcEngine';
import { RtcConnection } from '../ICmviotRtcEngineEx';
import { ILocalSpatialAudioEngine } from '../ICmviotSpatialAudio';
import { IRtcEngineEvent } from '../extension/ICmviotRtcEngineExtension';
import { IRtcEngineExImpl } from '../impl/ICmviotRtcEngineExImpl';
export declare class RtcEngineExInternal extends IRtcEngineExImpl {
    static _event_handlers: IRtcEngineEventHandler[];
    static _direct_cdn_streaming_event_handler: IDirectCdnStreamingEventHandler[];
    static _metadata_observer: IMetadataObserver[];
    static _audio_encoded_frame_observers: IAudioEncodedFrameObserver[];
    static _audio_spectrum_observers: IAudioSpectrumObserver[];
    private _audio_device_manager;
    private _video_device_manager;
    private _media_engine;
    private _music_content_center;
    private _local_spatial_audio_engine;
    initialize(context: RtcEngineContext): number;
    release(sync?: boolean): void;
    _addListenerPreCheck<EventType extends keyof IRtcEngineEvent>(eventType: EventType): boolean;
    addListener<EventType extends keyof IRtcEngineEvent>(eventType: EventType, listener: IRtcEngineEvent[EventType]): void;
    removeListener<EventType extends keyof IRtcEngineEvent>(eventType: EventType, listener?: IRtcEngineEvent[EventType]): void;
    removeAllListeners<EventType extends keyof IRtcEngineEvent>(eventType?: EventType): void;
    getVersion(): SDKBuildInfo;
    registerEventHandler(eventHandler: IRtcEngineEventHandler): boolean;
    unregisterEventHandler(eventHandler: IRtcEngineEventHandler): boolean;
    createMediaPlayer(): IMediaPlayer;
    destroyMediaPlayer(mediaPlayer: IMediaPlayer): number;
    createMediaRecorder(info: RecorderStreamInfo): IMediaRecorder;
    destroyMediaRecorder(mediaRecorder: IMediaRecorder): number;
    startDirectCdnStreaming(eventHandler: IDirectCdnStreamingEventHandler, publishUrl: string, options: DirectCdnStreamingMediaOptions): number;
    registerMediaMetadataObserver(observer: IMetadataObserver, type: MetadataType): number;
    unregisterMediaMetadataObserver(observer: IMetadataObserver, type: MetadataType): number;
    protected getApiTypeFromJoinChannel(token: string, channelId: string, uid: number, options: ChannelMediaOptions): string;
    protected getApiTypeFromLeaveChannel(options?: LeaveChannelOptions): string;
    protected getApiTypeFromSetClientRole(role: ClientRoleType, options?: ClientRoleOptions): string;
    protected getApiTypeFromStartEchoTest(config: EchoTestConfiguration): string;
    protected getApiTypeFromStartPreview(sourceType?: VideoSourceType): string;
    protected getApiTypeFromStopPreview(sourceType?: VideoSourceType): string;
    protected getApiTypeFromStartAudioRecording(config: AudioRecordingConfiguration): string;
    protected getApiTypeFromStartAudioMixing(filePath: string, loopback: boolean, cycle: number, startPos?: number): string;
    protected getApiTypeFromEnableDualStreamMode(enabled: boolean, streamConfig?: SimulcastStreamConfig): string;
    protected getApiTypeFromSetDualStreamMode(mode: SimulcastStreamMode, streamConfig?: SimulcastStreamConfig): string;
    protected getApiTypeFromLeaveChannelEx(connection: RtcConnection, options?: LeaveChannelOptions): string;
    protected getApiTypeFromCreateDataStream(config: DataStreamConfig): string;
    protected getApiTypeFromAddVideoWatermark(watermarkUrl: string, options: WatermarkOptions): string;
    protected getApiTypeFromJoinChannelWithUserAccount(token: string, channelId: string, userAccount: string, options?: ChannelMediaOptions): string;
    protected getApiTypeFromCreateDataStreamEx(config: DataStreamConfig, connection: RtcConnection): string;
    protected getApiTypeFromStartScreenCaptureBySourceType(sourceType: VideoSourceType, config: ScreenCaptureConfiguration): string;
    protected getApiTypeFromStopScreenCaptureBySourceType(sourceType: VideoSourceType): string;
    protected getApiTypeFromPreloadChannelWithUserAccount(token: string, channelId: string, userAccount: string): string;
    getAudioDeviceManager(): IAudioDeviceManager;
    getVideoDeviceManager(): IVideoDeviceManager;
    getMediaEngine(): IMediaEngine;
    getMusicContentCenter(): IMusicContentCenter;
    getLocalSpatialAudioEngine(): ILocalSpatialAudioEngine;
    registerAudioEncodedFrameObserver(config: AudioEncodedFrameObserverConfig, observer: IAudioEncodedFrameObserver): number;
    unregisterAudioEncodedFrameObserver(observer: IAudioEncodedFrameObserver): number;
    registerAudioSpectrumObserver(observer: IAudioSpectrumObserver): number;
    unregisterAudioSpectrumObserver(observer: IAudioSpectrumObserver): number;
    getScreenCaptureSources(thumbSize: Size, iconSize: Size, includeScreen: boolean): ScreenCaptureSourceInfo[];
    setupLocalVideo(canvas: VideoCanvas): number;
    setupRemoteVideo(canvas: VideoCanvas): number;
    setupRemoteVideoEx(canvas: VideoCanvas, connection: RtcConnection): number;
    setLocalRenderMode(renderMode: RenderModeType, mirrorMode?: VideoMirrorModeType): number;
    setRemoteRenderMode(uid: number, renderMode: RenderModeType, mirrorMode: VideoMirrorModeType): number;
    setRemoteRenderModeEx(uid: number, renderMode: RenderModeType, mirrorMode: VideoMirrorModeType, connection: RtcConnection): number;
    setLocalVideoMirrorMode(mirrorMode: VideoMirrorModeType): number;
    destroyRendererByView(view: any): void;
    destroyRendererByConfig(videoSourceType: VideoSourceType, channelId?: Channel, uid?: number): void;
}
//# sourceMappingURL=RtcEngineExInternal.d.ts.map